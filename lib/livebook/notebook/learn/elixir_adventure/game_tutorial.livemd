# Game Tutorial

```elixir
Mix.install([
  :phoenix,
  :kino,
  :elixir_math,
  {:game_server, path: "../game_server"}
])

Kino.SmartCell.register(SmartCells.Game1)
Kino.SmartCell.register(SmartCells.Game2)
Kino.SmartCell.register(SmartCells.Game3)
Kino.SmartCell.register(SmartCells.Game4)
Kino.SmartCell.register(SmartCells.Game5)
```

## Game tutorial

<!-- livebook:{"branch_parent_index":0} -->

## Level 1

<!-- livebook:{"attrs":{},"chunks":null,"kind":"Elixir.SmartCells.Game1","livebook_object":"smart_cell"} -->

```elixir
{:ok, server} =
  LocalGameServer.start_link(%{
    initial_fruit: {600, 125, 20},
    fruit_generated_probability: 0,
    success_func: fn %{fruits: fruits} -> Enum.empty?(fruits) end
  })

SmartCells.KinoGame.new(server)
```

### Intrucciones

* Registra un jugador
* Muévelo a la coordenada `{600, 125}` para comer la fruta.

```elixir
LocalGameServer.register(server, "nombre_jugador")
# Mueve el jugador a la coordenada {600, 125} usando la siguiente función:
#   LocalGameServer.move(server, {coordenada_x, coordenada_y})
```

<!-- livebook:{"branch_parent_index":0} -->

## Level 2

<!-- livebook:{"attrs":{},"chunks":null,"kind":"Elixir.SmartCells.Game2","livebook_object":"smart_cell"} -->

```elixir
{:ok, server} =
  LocalGameServer.start_link(%{
    initial_fruits_count: 5,
    fruit_generated_probability: 0,
    success_func: fn %{fruits: fruits} -> Enum.empty?(fruits) end
  })

SmartCells.KinoGame.new(server)
```

### Intrucciones

* Registra un jugador
* Obtén la posición de las frutas.
* Come todas las frutas, en cualquier orden.

```elixir
LocalGameServer.register(server, "nombre_jugador")
# La posición de las frutas se puede obtener con:
#   LocalGameServer.view(server)
# Encontrarás:
#  fruits: %{
#    {coordenada_x_fruta_1, coordenada_y_fruta_1} => {tamaño, :default},
#    {coordenada_x_fruta_2, coordenada_y_fruta_2} => {tamaño, :default},
#    <... resto de frutas>
#  }
# Mueve el jugador a cada una de las frutas usando la función LocalGameServer.move
```

<!-- livebook:{"branch_parent_index":0} -->

## Level 3

<!-- livebook:{"attrs":{},"chunks":null,"kind":"Elixir.SmartCells.Game3","livebook_object":"smart_cell"} -->

```elixir
{:ok, server} =
  LocalGameServer.start_link(%{
    initial_fruits: [{500, 125, 20}, {300, 125, 20, :power_up}],
    fruit_generated_probability: 0,
    success_func: fn %{fruits: fruits} ->
      fruits |> Enum.find(fn {_, {_, type}} -> type == :power_up end) |> is_nil()
    end,
    failure_func: fn %{fruits: fruits} ->
      fruits |> Enum.find(fn {_, {_, type}} -> type == :default end) |> is_nil()
    end
  })

SmartCells.KinoGame.new(server)
```

### Intrucciones

* Come la fruta powerup, la de color violeta. Ignora la fruta normal amarilla.

```elixir
LocalGameServer.register(server, "nombre_jugador")
# Busca la posición de la fruta powerup
# En LocalGameServer.view(server) encontrarás:
#   fruits: %{
#     {coordenada_x_fruta_1, coordenada_y_fruta_1} => {tamaño, :power_up},
#     <...resto de frutas>
#   }
```

<!-- livebook:{"branch_parent_index":0} -->

## Level 4

Instrucciones

* Come primero la fruta powerup y dirígete después al enemigo para atacarlo.

<!-- livebook:{"attrs":{},"chunks":null,"kind":"Elixir.SmartCells.Game4","livebook_object":"smart_cell"} -->

```elixir
{:ok, server} =
  LocalGameServer.start_link(%{
    initial_fruits: [{500, 125, 20}, {300, 125, 20, :power_up}],
    initial_enemies: [{"enemy", %{pos_x: 600, pos_y: 200, size: 20, score: 5000}}],
    powered_ticks_per_fruit_size: 50,
    max_powered: 10000,
    powered_velocity_bonus: 0,
    fruit_generated_probability: 0,
    success_func: fn %{players: players} ->
      {_, %{score: score, status: status}} =
        players |> Enum.find(fn {_, %{pid: pid}} -> is_nil(pid) end)

      score < 5000 and status == :idle
    end
  })

SmartCells.KinoGame.new(server)
```

```elixir
LocalGameServer.register(server, "nombre_jugador")
# La posición del enemigo se puede encontrar en LocalGameServer.view(server):
#  players: %{
#    "nodo_jugador@host" => %{
#       ...
#       name: "enemy"
#       pos: {coordenada_x_enemigo, coordenada_y_enemigo},
#    }
#  }
```

<!-- livebook:{"branch_parent_index":0} -->

## Level 5

Instrucciones

* Come las frutas por orden de cercanía.

<!-- livebook:{"attrs":{},"chunks":null,"kind":"Elixir.SmartCells.Game5","livebook_object":"smart_cell"} -->

```elixir
{:ok, server} =
  LocalGameServer.start_link(%{
    initial_fruits: [
      {450, 125, 5, :power_up},
      {400, 70, 10},
      {300, 125, 15, :power_up},
      {400, 205, 20},
      {600, 75, 25}
    ],
    powered_ticks_per_fruit_size: 50,
    max_powered: 10000,
    powered_velocity_bonus: 0.001,
    fruit_generated_probability: 0,
    success_func: fn %{fruits: fruits} -> Enum.empty?(fruits) end,
    failure_func: fn
      %{fruits: fruits} when fruits == %{} ->
        false

      %{fruits: fruits} ->
        min_size = fruits |> Enum.map(fn {_, {size, _}} -> size end) |> Enum.min()
        count = Enum.count(fruits)
        min_size < 30 - count * 5
    end
  })

SmartCells.KinoGame.new(server)
```

```elixir
LocalGameServer.register(server, "nombre_jugador")
# Las coordenadas {x,y} de la fruta más cercana se pueden obtener con:
#  GameUtils.closest_fruit(player, fruits)

# Definición de un módulo Bot
defmodule Bot do
  # Función principal de ejecución
  def run(server) do
    # Eliminación de posibles mensajes anteriores
    :c.flush()
    # Entrada a un bucle que recibe continuamente mensajes
    loop_receive(server)
  end

  defp loop_receive(server) do
    receive do
      {:board_tick, %{status: :idle} = player, _players, fruits} ->
        # Si el jugador se encuentra parado (:idle), nos movemos a la fruta más cercana
        # Escribe aquí tu código

      _ ->
        # Si el jugador se encuentra en otro estado (incluído movimiento), no hacemos nada:
        :ok
    end

    loop_receive(server)
  end
end

# Ejecución del bot:
Bot.run(server)
```
